@page "/editToDoItem/{ItemId:int}"
@using System.Diagnostics
@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject NavigationManager NavigationManager
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer

<PageTitle>Edit ToDoItem</PageTitle> @*this needs be renamed*@
<h1>Edit</h1>
@if (itemView is not null)
{
    <EditForm Model="itemView" FormName="EditToDoItem" OnValidSubmit="Submit"> @*OnSubmit -> OnValidSubmit*@
        <DataAnnotationsValidator />
        <label for="Name" class="form-label">Name:</label>
        <InputText id="Name" class="form-control" @bind-Value="itemView.Name" />
        <ValidationMessage For="() => itemView.Name" />
        <label for="Description" class="form-label">Description:</label>
        <InputText id="Description" class="form-control" @bind-Value="itemView.Description" />
        <ValidationMessage For="() => itemView.Description" />
        <label for="IsCompleted" class="form-check-label">IsCompleted:</label>
        <InputCheckbox id="IsCompleted" class="form-check" @bind-Value="itemView.IsCompleted" />
        <ValidationMessage For="() => itemView.IsCompleted" />
        <button type="submit">Submit</button>
    </EditForm>
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        ToDoItemView? retrievedItem = await ToDoItemsClient.ReadItemByIdAsync(ItemId);
        if (retrievedItem is not null)
        {
            itemView = retrievedItem;
        }

        @* BasicDelegate += SomeDelegateMethod;
        BasicDelegate += (itemView) =>
        {
            var stackTrace = new StackTrace();
            var method = stackTrace.GetFrame(0)?.GetMethod();
            Console.WriteLine($"{method}: Item with id {itemView.ToDoItemId} has been submitted.");
        }; *@

        ActionDelegate += SomeDelegateMethod;
        ActionDelegate += (itemView) =>
        {
            var stackTrace = new StackTrace();
            var method = stackTrace.GetFrame(0)?.GetMethod();
            Console.WriteLine($"{method}: Item with id {itemView.ToDoItemId} has been submitted.");
        };
    }

    [Parameter]
    public int ItemId { get; set; }

    [SupplyParameterFromForm]

    public ToDoItemView itemView { get; set; } = new ToDoItemView
        {
            ToDoItemId = 0,
            Name = string.Empty,
            Description = string.Empty,
            IsCompleted = false
        };

    private Action<ToDoItemView>? ActionDelegate;
    private BasicDelegateType BasicDelegate;
    private delegate void BasicDelegateType(ToDoItemView itemView);

    public void SomeDelegateMethod(ToDoItemView itemView)
    {
        Console.WriteLine($"Item with id {itemView.ToDoItemId} has been submitted.");
    }

    public async Task Submit()
    {
        BasicDelegate?.Invoke(itemView);
        ActionDelegate?.Invoke(itemView);
        await ToDoItemsClient.UpdateItemAsync(itemView);
        NavigationManager.NavigateTo("/");
    }
}
