@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject IToDoItemsClient ToDoItemsClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h1>Dashboard</h1>

<table class="table table-hover mt-5">
    <thead class="table-dark">
        <th>Id</th>
        <th>Name</th>
        <th>Description</th>
        <th>Completed</th>
        <th>Actions</th>
    </thead>
    <tbody>
        @if (toDoItems is null)
        {
            <p>Nacitam...</p>
        }

        @if (toDoItems is not null)
        {
            @foreach (var toDoItem in toDoItems.Where(CurrentFilter))
            {
                <tr class="table-success">
                    <td>@toDoItem.ToDoItemId</td>
                    <td>@toDoItem.Name</td>
                    <td>@toDoItem.Description</td>
                    <td>@toDoItem.IsCompleted</td>
                    <td><button class="btn btn-success" @onclick="() => EditItem(toDoItem)">Edit</button></td>
                </tr>
            }
        }
    </tbody>
</table>
<button class="btn btn-success" @onclick="OrderById">Seradit Podle Id</button>
<button class="btn btn-success" @onclick="OrderByName">Seradit Podle Jmena</button>
<button class="btn btn-success" @onclick="ShowAll">Show All</button>
<button class="btn btn-success" @onclick="ShowCompleted">Show Completed</button>
<button class="btn btn-success" @onclick="ShowIncomplete">Show Incomplete</button>

@code
{
    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }

    private List<ToDoItemView>? toDoItems;
    private Func<ToDoItemView, bool> CurrentFilter = (item) => true;

    public void OrderByName()
    {
        toDoItems = toDoItems?.OrderBy(item => item.Name).ToList();
    }
    public void OrderById()
    {
        toDoItems = toDoItems?.OrderBy(item => item.ToDoItemId).ToList();
    }

    public void EditItem(ToDoItemView toDoItem)
    {
        NavigationManager.NavigateTo($"editToDoItem/{toDoItem.ToDoItemId}");
    }

    private void ShowAll() => CurrentFilter = item => true;
    private void ShowCompleted() => CurrentFilter = item => item.IsCompleted;
    private void ShowIncomplete() => CurrentFilter = item => !item.IsCompleted;
}
